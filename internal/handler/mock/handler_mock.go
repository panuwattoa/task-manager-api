// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"
	comment "task-manager-api/internal/comment"
	profile "task-manager-api/internal/profile"

	gomock "github.com/golang/mock/gomock"
)

// MockITasks is a mock of ITasks interface.
type MockITasks struct {
	ctrl     *gomock.Controller
	recorder *MockITasksMockRecorder
}

// MockITasksMockRecorder is the mock recorder for MockITasks.
type MockITasksMockRecorder struct {
	mock *MockITasks
}

// NewMockITasks creates a new mock instance.
func NewMockITasks(ctrl *gomock.Controller) *MockITasks {
	mock := &MockITasks{ctrl: ctrl}
	mock.recorder = &MockITasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITasks) EXPECT() *MockITasksMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockITasks) CreateTask(ctx context.Context, topic, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, topic, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockITasksMockRecorder) CreateTask(ctx, topic, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockITasks)(nil).CreateTask), ctx, topic, desc)
}

// MockIComments is a mock of IComments interface.
type MockIComments struct {
	ctrl     *gomock.Controller
	recorder *MockICommentsMockRecorder
}

// MockICommentsMockRecorder is the mock recorder for MockIComments.
type MockICommentsMockRecorder struct {
	mock *MockIComments
}

// NewMockIComments creates a new mock instance.
func NewMockIComments(ctrl *gomock.Controller) *MockIComments {
	mock := &MockIComments{ctrl: ctrl}
	mock.recorder = &MockICommentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIComments) EXPECT() *MockICommentsMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockIComments) CreateComment(ctx context.Context, ownerID, topicID, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, ownerID, topicID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockICommentsMockRecorder) CreateComment(ctx, ownerID, topicID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockIComments)(nil).CreateComment), ctx, ownerID, topicID, content)
}

// GetComment mocks base method.
func (m *MockIComments) GetComment(ctx context.Context, id string) (*comment.CommentDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, id)
	ret0, _ := ret[0].(*comment.CommentDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockICommentsMockRecorder) GetComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockIComments)(nil).GetComment), ctx, id)
}

// MockIProfile is a mock of IProfile interface.
type MockIProfile struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileMockRecorder
}

// MockIProfileMockRecorder is the mock recorder for MockIProfile.
type MockIProfileMockRecorder struct {
	mock *MockIProfile
}

// NewMockIProfile creates a new mock instance.
func NewMockIProfile(ctrl *gomock.Controller) *MockIProfile {
	mock := &MockIProfile{ctrl: ctrl}
	mock.recorder = &MockIProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfile) EXPECT() *MockIProfileMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockIProfile) GetProfile(ctx context.Context, id string) (*profile.ProfileDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, id)
	ret0, _ := ret[0].(*profile.ProfileDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIProfileMockRecorder) GetProfile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIProfile)(nil).GetProfile), ctx, id)
}

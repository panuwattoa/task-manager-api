// Code generated by MockGen. DO NOT EDIT.
// Source: ./profile.go

// Package mock_profile is a generated GoMock package.
package mock_profile

import (
	context "context"
	reflect "reflect"
	mongo "task-manager-api/internal/mongo"

	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIMongo is a mock of IMongo interface.
type MockIMongo struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoMockRecorder
}

// MockIMongoMockRecorder is the mock recorder for MockIMongo.
type MockIMongoMockRecorder struct {
	mock *MockIMongo
}

// NewMockIMongo creates a new mock instance.
func NewMockIMongo(ctrl *gomock.Controller) *MockIMongo {
	mock := &MockIMongo{ctrl: ctrl}
	mock.recorder = &MockIMongoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMongo) EXPECT() *MockIMongoMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockIMongo) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) mongo.SingleResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(mongo.SingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockIMongoMockRecorder) FindOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIMongo)(nil).FindOne), varargs...)
}
